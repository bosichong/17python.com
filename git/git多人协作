#codeing=utf-8
# @Time    : 2018-03-16
# @Author  : py.sky
# @Mail    : bosichong@qq.com
# @Site    : www.17python.com
# @Title   : 实战：利用Django开发部署自己的个人博客（18）博客的Robots与sitemap.xmlitemaps
# @Url     : http://www.17python.com/blog/81
# @Details : 实战：利用Django开发部署自己的个人博客（18）博客的Robots与sitemap.xml
# @Other   : OS X 10.11.6
#            Python 3.6.1
#            PyCharm
###################################
# Git多人协作（码云）中的一些操作简单记录
###################################

最近和一个帅哥共同开发一个小项目，期间需要使用Git协作开发，之前是个人使用Git进行一些简单的提交，与他人Git协作算是头一回，记录下一些操作备查。

我们模拟一个项目的多人Git协作，假设多人合作至少二人，并且添加合作人员进入项目为开发者以上权限。远程代码仓库以码云'gitee.com'为例:

## 创建远程代码仓库和本地仓库。

* 选择码云在线创建代码仓库很方便，我们直接在线创建一个master和dev两条分支（很简单，这里不截图了）。
* 创建本地代码仓库与远程关联：1.利用'git clone XXXXXXX'下载到本地，即可关联仓库。
* 但是远端的dev分支并没有下载来，我们新建本地分支dev并进入，然后pull远程分支.

        ➜  test git:(master) git branch 
        * master
        ➜  test git:(master) git checkout -b dev
        Switched to a new branch 'dev'
        ➜  test git:(dev) git pull origin dev   
        From https://gitee.com/bosichong/test
        * branch            dev        -> FETCH_HEAD
        Already up-to-date.
        ➜  test git:(dev) git branch 
        * dev
        master

这样的话我们的本地库与远程代码仓库相关联了。

## 如何协作更新代码？

远程master是主分支，一般由专人负责提交更新版本即可，我们主要是在dev这样的分支上进行更新操作，当程序更新到一定程序后，合并到master中发布一个版本。
模拟一次git协作：
假设需要研发一个人工智能编码器，我和我的小伙们都在进行编码，我在分支aicode仓库中ai.py编写了大量的代码并完成需要上传远程仓库dev。
首先我把aicode分支全并到本地的dev,然后上传到远程dev仓库。

    ➜  test git:(dev) git checkout -b aicode
    Switched to a new branch 'aicode'
    ➜  test git:(aicode) touch ai.py
    ➜  test git:(aicode) ✗ vi ai.py 
    ➜  test git:(aicode) ✗ git add .
    ➜  test git:(aicode) ✗ git commit -m 'aicode功能更新'
    [aicode a1e0b50] aicode功能更新
    1 file changed, 2 insertions(+)
    create mode 100644 ai.py
    ➜  test git:(aicode) git checkout dev 
    Switched to branch 'dev'
    ➜  test git:(dev) git merge aicode 
    Updating 8fcac3b..a1e0b50
    Fast-forward
    ai.py | 2 ++
    1 file changed, 2 insertions(+)
    create mode 100644 ai.py
    ➜  test git:(dev) git push origin dev  
    Counting objects: 3, done.
    Delta compression using up to 8 threads.
    Compressing objects: 100% (2/2), done.
    Writing objects: 100% (3/3), 298 bytes | 298.00 KiB/s, done.
    Total 3 (delta 0), reused 0 (delta 0)
    remote: Powered by Gitee.com
    To https://gitee.com/bosichong/test.git
    8fcac3b..a1e0b50  dev -> dev

这样我就完成了一次更新，其实挺简单的。

## 发生冲突怎么办？

有一次我和我的小伙伴都在更新readme.md，他负责前半部我负责后半部分，但是他明显比我快，先进行了版本提交，而我刚刚弄完，现在要提交了，当我提交dev分支到远程的时候终端提示如下：

    To https://gitee.com/bosichong/test.git
    ! [rejected]        dev -> dev (fetch first)
    error: failed to push some refs to 'https://gitee.com/bosichong/test.git'
    hint: Updates were rejected because the remote contains work that you do
    hint: not have locally. This is usually caused by another repository pushing
    hint: to the same ref. You may want to first integrate the remote changes
    hint: (e.g., 'git pull ...') before pushing again.
    hint: See the 'Note about fast-forwards' in 'git push --help' for details.

大体意思是：远程的版本比你现在的要新，你需要先下载更新一下，然后再提交。好吧，我先更新一下dev版本，pull下来。
然后再pull的时候提示如下：

    * branch            dev        -> FETCH_HEAD
    99ccc9c..4c49e33  dev        -> origin/dev
    Auto-merging README.md
    CONFLICT (content): Merge conflict in README.md
    Automatic merge failed; fix conflicts and then commit the result.

大体意思是文件已经pull下来了，但是两个文件有冲突，必须先处理冲突，并告诉你冲突文件是readme.md。
我们解决一下文件中的冲突内容：

    <<<<<<< HEAD
    我更新的下半部分啊
    =======
    小伙伴更新的上半部分
    >>>>>>> 4c49e33af00dd498b2d4761d3fc607ee29afbdf4

这里我这样的修改的：

    小伙伴更新的上半部分
    我更新的下半部分啊

处理解决后，就可以提交更新dev到远程的仓库了。从此以后就可以和小伙伴们开心的编码了。

## 分支策略

在实际开发中，我们应该按照几个基本原则进行分支管理：

首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；

那在哪干活呢？干活都从dev分支再创建一条分支在开工，完成后，再全并到本地dev并更新到远端dev，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本。

你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。

所以，团队合作的分支看起来就像这样：

配图


一些常用协作git命令：

    查看分支：git branch
    创建分支：git branch <name>
    切换分支：git checkout <name>
    创建+切换分支：git checkout -b <name>
    合并某分支到当前分支：git merge <name>
    删除分支：git branch -d <name>
    git remote 显示 远程仓库的分支
    git remote -v 显示更详细的信息：